
🐰 RabbitMQ Nedir?

RabbitMQ, uygulamalar arasında mesajlaşma (message queue) altyapısı sağlar.
Yani: Üretici (Producer) bir mesaj gönderir, Tüketici (Consumer) bu mesajı alır.
Ama ikisi aynı anda çalışmak zorunda değildir. Bu sayede:

Performans artar ✅

Gevşek bağlı sistemler kurulabilir ✅

Dayanıklılık sağlanır ✅
---
🔄 RabbitMQ Akışı (Bizim uygulamamızda)
scss
Kopyala
Düzenle
Swagger (POST Order)
    ↓
Producer API (RabbitMQPublisher)
    ↓
RabbitMQ (order_queue kuyruğu)
    ↓
Worker (Consumer) dinliyor ve alıyor

----------

📦 Temel RabbitMQ Yapısı
Kavram	Açıklama
Producer	Mesajı oluşturan ve gönderen sistem (bizim API)
Consumer	Kuyruktan mesajı alan sistem (bizim Worker)
Queue	Mesajların geçici olarak tutulduğu yer (bizde: order_queue)
Exchange	Mesajın nasıl yönlendirileceğini belirleyen yapıdır
Binding	Exchange ile Queue arasındaki bağlantıdır
RoutingKey	Mesajın hangi kuyruklara gideceğini belirler
Message	Kuyrukta taşınan veridir (bizim OrderMessage JSON)


-----------------

🧪 Bizim Kod Üzerinden İnceleme
🔹 Queue Tanımı

_channel.QueueDeclare(
    queue: "order_queue",
    durable: true,
    exclusive: false,
    autoDelete: false,
    arguments: null
);
Parametre	Açıklama
queue	Kuyruk ismi
durable: true	Sunucu yeniden başlasa bile kuyruk kalsın
exclusive: false	Sadece bu bağlantıya özel olmasın, diğerleri de erişebilsin
autoDelete: false	Kullanıcı kalmayınca kuyruk silinmesin
arguments: null	Opsiyonel ayarlar (örnek: TTL, DLQ vs.)

------------------------------------------------

🔹 Mesaj Gönderme (Producer)
csharp
Kopyala
Düzenle
var body = Encoding.UTF8.GetBytes(JsonSerializer.Serialize(message));

_channel.BasicPublish(
    exchange: "",                    // default exchange
    routingKey: "order_queue",       // hangi kuyruğa gönderilecek
    basicProperties: null,           // header, ttl vs. eklemek istersen
    body: body                       // mesaj içeriği (JSON)
);
exchange: "" → Default exchange: direkt routingKey ile kuyruk bulunur

routingKey: "order_queue" → Hedef kuyruk

body → byte[] mesaj içeriği (bizim JSON string)


------------------------------
🔹 Mesaj Alma (Consumer)
csharp
Kopyala
Düzenle
var consumer = new EventingBasicConsumer(_channel);

consumer.Received += (model, ea) =>
{
    var body = ea.Body.ToArray();
    var message = Encoding.UTF8.GetString(body);
    _logger.LogInformation("📥 Mesaj alındı: {Message}", message);
};

_channel.BasicConsume(queue: "order_queue", autoAck: true, consumer: consumer);
Özellik	Açıklama
autoAck: true	Mesaj alındığında otomatik olarak "işlendi" kabul edilir
autoAck: false	Manuel olarak BasicAck ile onay vermek gerekir (retry için kullanılır)
Received	Mesaj geldiğinde tetiklenen olaydır
--------------------------------------------------
🛠 Faydalı RabbitMQ Özellikleri 
Özellik	Açıklama
🧾 Durable Queue	Sunucu çökse bile mesajlar/kuyruklar kaybolmaz
📭 Dead Letter Queue (DLQ)	Hatalı işlenemeyen mesajlar başka kuyruğa yönlendirilir
🔁 Retry mekanizması	Mesajlar işlenemezse yeniden denenebilir
⏱ TTL (Time-To-Live)	Kuyruktaki mesajın ömrünü belirleyebilirsin
📊 Priority Queue	Bazı mesajlara öncelik verebilirsin
🧠 Header Exchange	Mesajlara ek bilgiler ekleyerek filtreleme yapılabilir

-----------------------------------------

# 🧭 Exchange Nedir?

**Exchange**, RabbitMQ'da gelen mesajların **hangi kuyruk(lar)a yönlendirileceğini** belirleyen mekanizmadır.

🟡 Producer mesajı doğrudan kuyruğa göndermez!  
🟢 Producer → **Exchange** → Routing yapılır → Kuyruklara gider.

---

## 📦 Basit Akış:
```
Producer
   ↓
 Exchange 🔁 (Mesajı yönlendirir)
   ↓
 Queue(s)
   ↓
 Consumer(s)
```

---

## 🎯 Exchange’in Görevi Nedir?

Exchange’in görevi:

> "Gelen mesaj hangi kuyruğa, hangi kurala göre gidecek?"

sorusunu cevaplamaktır.

---

## 🧠 Neden Exchange var?

Çünkü:
- Tek bir mesaj → birden fazla kuyruğa gidebilir
- Routing kurallarına göre mesaj dağıtmak gerekebilir
- Kuyrukları birbirinden ayırmak ama aynı kaynak üzerinden mesaj yaymak gerekebilir

---

## 🧩 Exchange Türleri

| Tür | Açıklama |
|-----|----------|
| 🔹 `Direct` | routingKey tam eşleşmeli yönlendirme |
| 🔸 `Fanout` | routingKey'e bakmaz, tüm bağlı kuyruklara mesaj gönderir |
| ⚫ `Topic` | routingKey pattern’lerine göre eşleşir (joker karakterlerle) |
| 🟤 `Headers` | Header bilgilerine göre eşleşme yapar |

---

## 🔹 1. Direct Exchange

- **routingKey birebir eşleşmeli**
- Yani "routingKey: order.created" → sadece o key ile bağlı kuyruklara gider

```csharp
_channel.ExchangeDeclare("direct_logs", ExchangeType.Direct);

_channel.QueueBind("order_queue", "direct_logs", "order.created");

_channel.BasicPublish("direct_logs", "order.created", null, body);
```

---

## 🔸 2. Fanout Exchange

- **routingKey yok**
- Exchange’e gelen mesaj → bağlı tüm kuyruklara gider

```csharp
_channel.ExchangeDeclare("broadcast_logs", ExchangeType.Fanout);

_channel.QueueBind("queue1", "broadcast_logs", "");
_channel.QueueBind("queue2", "broadcast_logs", "");

_channel.BasicPublish("broadcast_logs", "", null, body);
```

🎯 Çoklu sisteme aynı mesajı göndermek için harika!

---

## ⚫ 3. Topic Exchange

- routingKey, **pattern (desen)** eşleşmesi ile çalışır

```csharp
_channel.ExchangeDeclare("topic_logs", ExchangeType.Topic);

_channel.QueueBind("order_queue", "topic_logs", "order.*");
_channel.QueueBind("payment_queue", "topic_logs", "*.created");

_channel.BasicPublish("topic_logs", "order.created", null, body);
```

| Pattern | Anlamı |
|---------|--------|
| `*`     | Tek kelime |
| `#`     | Sınırsız kelime |

Örn: `"order.#"` → `order.created`, `order.updated.details` hepsi uyar ✅

---

## 🟤 4. Headers Exchange

- routingKey kullanmaz
- Mesajdaki `headers` key-value'larına göre yönlendirme yapılır

```csharp
var args = new Dictionary<string, object>
{
    { "x-match", "all" }, // veya "any"
    { "type", "pdf" },
    { "user", "admin" }
};

_channel.QueueBind("pdfQueue", "header_logs", "", args);
```

💡 Daha karmaşık filtreleme senaryoları için uygundur.

---

## 🧾 Producer’dan Exchange’e Mesaj Gönderme

```csharp
_channel.BasicPublish(
    exchange: "direct_logs",           // exchange adı
    routingKey: "order.created",       // mesajı eşleyecek key
    basicProperties: null,
    body: body
);
```

> Bu mesaj, `direct_logs` exchange'ine gider ve routingKey’i "order.created" olan kuyruğa yönlenir.

---

## 🧠 Kısaca:

| Terim | Açıklama |
|-------|----------|
| `Exchange` | Mesajları yönlendiren merkez |
| `routingKey` | Mesajı eşleyecek anahtar |
| `QueueBind` | Exchange ile kuyruk arasında bağ |
| `ExchangeType` | Yönlendirme mantığı (direct, fanout, topic, headers) |

---

## 🎯 Gerçek Hayat Örneği:

> Exchange: `user_events`  
> routingKey: `user.created`, `user.deleted`, `user.updated`  
> Queue:  
> - `emailQueue` sadece `user.created` alır  
> - `auditQueue` tüm event'leri alır (`user.#`)

